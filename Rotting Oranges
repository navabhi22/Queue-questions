994. Rotting Oranges
Medium
10K
338
Companies

You are given an m x n grid where each cell can have one of three values:

    0 representing an empty cell,
    1 representing a fresh orange, or
    2 representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 10
    grid[i][j] is 0, 1, or 2.


class Solution {
    class pair{
        public pair(int row, int col){
            this.row=row;
            this.col=col;
        }
        int row;
        int col;
    }
   
    public int orangesRotting(int[][] grid) {
        int R=grid.length;
        int C=grid[0].length;
        Queue<pair> q = new LinkedList<pair>();
        for(int r=0;r<R;r++){
            for(int c=0;c<C;c++){
                if(grid[r][c]==2){
                    q.add(new pair(r,c));
                }
            }
        }
         boolean flag=false;
        int t=-1;
        while(!q.isEmpty()){
            flag=true;
            t++;
            int size=q.size();
            for(int idx=0;idx<size;idx++){
                int i =q.peek().row;
                int j=q.peek().col;
                //up
                if(i-1>=0 && grid[i-1][j]==1){
                  grid[i-1][j]=2;
                  q.add(new pair(i-1,j));
                }
                //down
                if(i+1<R && grid[i+1][j]==1){
                  grid[i+1][j]=2;
                  q.add(new pair(i+1,j));
                }
                //left
                if(j-1>=0 && grid[i][j-1]==1){
                  grid[i][j-1]=2;
                  q.add(new pair(i,j-1));
                }
                //right
                if(j+1<C && grid[i][j+1]==1){
                  grid[i][j+1]=2;
                  q.add(new pair(i,j+1));
                }
                q.remove();
            }
        }
        for(int r=0;r<R;r++){
            for(int c=0;c<C;c++){
                if(grid[r][c]==1){
                  return -1;
                }
            }
        }
        
        if(t==-1){
            return 0;
        } 
        return t;
    }
}
