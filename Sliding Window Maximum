239. Sliding Window Maximum
Hard
13.9K
457
Companies

You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:

Input: nums = [1], k = 1
Output: [1]

 

Constraints:

    1 <= nums.length <= 105
    -104 <= nums[i] <= 104
    1 <= k <= nums.length

Accepted
737.1K
Submissions
1.6M
Acceptance Rate
46.3%



Deque<Integer> q = new LinkedList<Integer>();
        int n =nums.length;
        int i=0;
        int[] ans = new int[n-k+1];
        for(;i<k;i++){
            if(q.isEmpty()){
                q.add(i);
            }else{
                while(!q.isEmpty() && nums[q.peekLast()]<nums[i]){
                    q.pollLast();
                }
                if(q.isEmpty()) q.add(i);
                else q.add(i);
            }
        }
        int j=1;
        ans[0]=nums[q.peekFirst()];
        for(;i<n;i++,j++){
            if(q.peekFirst()<=i-k){
                q.removeFirst();
            }
            while(!q.isEmpty() && nums[q.peekLast()]<nums[i]){
                q.pollLast();
            }
            if(q.isEmpty()) ans[j]=nums[i];
            else ans[j]=nums[q.peekFirst()];
            q.add(i);
        }
        return ans;
